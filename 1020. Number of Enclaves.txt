class Solution {
public:
void func(int r,int c,vector<vector<int>>&vis,vector<vector<int>>& a)
{
        int n=a.size();
        int m=a[0].size();
        int dr[4]={-1,0,+1,0};
        int dc[4]={0,+1,0,-1};
        queue<pair<int,int>>q;
        q.push({r,c});
        vis[r][c]=1;
        while(q.size()!=0)
        {
            int r1=q.front().first;
            int c1=q.front().second;
            q.pop();
            for(int k=0;k<4;k++)
            {
                int nr=r1+dr[k];
                int nc=c1+dc[k];
                if(nr>=0 && nr<n && nc>=0 && nc<m && a[nr][nc]==1 && vis[nr][nc]==0)
                {
                    q.push({nr,nc});
                    vis[nr][nc]=1;
                }
            }
        }
}
    int numEnclaves(vector<vector<int>>& a) 
    {
        int n=a.size();
        int m=a[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        for(int i=0;i<m;i++)
        {
            if(a[0][i]==1 && vis[0][i]==0)
                func(0,i,vis,a);
            if(a[n-1][i]==1 && vis[n-1][i]==0)
                func(n-1,i,vis,a);
        }
        for(int i=0;i<n;i++)
        {
            if(a[i][0]==1 && vis[i][0]==0)
                func(i,0,vis,a);
            if(a[i][m-1]==1 && vis[i][m-1]==0)
                func(i,m-1,vis,a);
        }
        int cnt=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(a[i][j]==1 && vis[i][j]!=1)
                    cnt++;
            }
        }
        return cnt;
    }
};