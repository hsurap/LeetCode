/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* func(vector<int>inorder ,vector<int>postorder,int is,int ie,int ps,int pe)
    {
        if(is>ie || ps>pe)
            return NULL;
        int rootdata=postorder[pe];
        TreeNode*root=new TreeNode(rootdata);
        int rootindex=-1;
        for(int i=is;i<=ie;i++)
        {
            if(rootdata==inorder[i])
            {
                rootindex=i;
                break;
            }
        }
        int lis=is;
        int lie=rootindex-1;
        int lps=ps;
        int lpe=lie-lis+lps;
        int rps=lpe+1;
        int rpe=pe-1;
        int ris=rootindex+1;
        int rie=ie;
        root->left=func(inorder,postorder,lis,lie,lps,lpe);
        root->right=func(inorder,postorder,ris,rie,rps,rpe);
        return root;
        
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) 
    {
        return func(inorder,postorder,0,inorder.size()-1,0,postorder.size()-1);
    }
};