class Solution {

public:

    int shortestPathBinaryMatrix(vector<vector<int>>& a) 

    {

        int n=a.size();

        int m=a[0].size();

        if(a[0][0]==1 || a[n-1][m-1]==1)return -1;

        vector<vector<int>>dis(n,vector<int>(m,1e9));

        dis[0][0]=1;

        queue<pair<int,int>>q;

        q.push({0,0});

        while(q.size()!=0)

        {

            auto f=q.front();

            q.pop();

            for(int dr=-1;dr<=1;dr++)

            {

                for(int dc=-1;dc<=1;dc++)

                {

                    int nr=f.first+dr;

                    int nc=f.second+dc;

                    if(nr>=0 && nc>=0 && nr<n && nc<m && a[nr][nc]==0 && dis[nr][nc]==1e9)

                    {

                        dis[nr][nc]=dis[f.first][f.second]+1;

                        q.push({nr,nc});

                    }

                }

            }

        }

        if(dis[n-1][m-1]==1e9)return -1;

        return dis[n-1][m-1];

    }

};
