/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

TreeNode*func(TreeNode* root)
    {
        if(root==NULL)return NULL;
        if(root->left==NULL && root->right==NULL)return root;
        if(root->left==NULL)
        {
            TreeNode*temp=root->right;
            root->right=NULL;
            root->right=func(temp);
            return root;
        }
        else if(root->right==NULL)
        {
            TreeNode*temp=root->left;
            root->left=NULL;
            TreeNode*sa=func(temp);
            sa->left=NULL;
            TreeNode*sa1=sa;
            while(sa1->right!=NULL)
                sa1=sa1->right;
            sa1->right=root;
            return sa;
        }
        else{
            TreeNode*temp=root->right;
            TreeNode*temp1=root->left;
            root->right=NULL;
            root->left=NULL;
            TreeNode*sa2=func(temp);
            sa2->left=NULL;
            root->right=sa2;
            TreeNode*sa=func(temp1);
            TreeNode*sa1=sa;
            while(sa1->right!=NULL)
                sa1=sa1->right;
            sa1->right=root;
            return sa;
        }

    }

class BSTIterator {
public:
    TreeNode*curr=NULL;
    BSTIterator(TreeNode* root) {
        curr=func(root);
    }
    
    int next() {
        int ans= curr->val;
        curr=curr->right;
        return ans;
    }
    
    bool hasNext() {
        if(curr!=NULL )
            return true;
        else
            return false;
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */