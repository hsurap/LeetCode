/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    ListNode*reverse(ListNode*head)
    {
        ListNode*c=head;
        ListNode*p=NULL;
        ListNode*n;
        while(c!=NULL)
        {
            n=c->next;
            c->next=p;
            p=c;
            c=n;
        }
        return p;
    }
    // int legnth(ListNode*head)
    // {
    //     ListNode*temp=head;
    //     int count=0;
    //     while(temp!=NULL)
    //     {
    //         count++;
    //         temp=temp->next;
    //     }
    //     return count;
    // }
    bool isPalindrome(ListNode* head) 
    {
        if(head==NULL || head->next==NULL)
            return head;
        ListNode*slow=head;
        ListNode*fast=head->next;
        while(fast!=NULL && fast->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        ListNode*temp=slow->next;
        slow->next=NULL;
        ListNode*temp1=reverse(temp);
        while(temp1!=NULL && head!=NULL)
        {
            if(temp1->val!=head->val)return false;
            temp1=temp1->next;
            head=head->next;
        }
        return true;
        
    }
};