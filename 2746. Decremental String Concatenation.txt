class Solution {
public:
    int minimizeConcatenatedLength(vector<string>& a) {
        int n = a.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(26, vector<int>(26,INT_MAX))); // Tabulation table

        dp[0][a[0][0]-'a'][a[0][a[0].size()-1]-'a']=a[0].size();
        for (int i = 1; i < n; i++) 
        {
            string curr=a[i];
            for (int j = 0; j < 26; j++) 
            {
                    for (int k = 0; k < 26; k++) 
                    {
                        if(dp[i-1][j][k]!=INT_MAX)
                        {
                            if((curr[0]-'a')==k)
                            {
                                int prev=dp[i][j][curr[curr.size()-1]-'a'];
                                int prev1=dp[i-1][j][k]+curr.size()-1;
                                dp[i][j][curr[curr.size()-1]-'a']=min(prev,prev1);
                            }else{
                                int prev=dp[i][j][curr[curr.size()-1]-'a'];
                                int prev1=dp[i-1][j][k]+curr.size();
                                dp[i][j][curr[curr.size()-1]-'a']=min(prev,prev1);
                            }
                            
                            
                            if((curr[curr.size()-1]-'a')==j)
                            {
                                int prev=dp[i][curr[0]-'a'][k];
                                int prev1=dp[i-1][j][k]+curr.size()-1;
                                dp[i][curr[0]-'a'][k]=min(prev,prev1);
                            }
                            else{
                                int prev=dp[i][curr[0]-'a'][k];
                                int prev1=dp[i-1][j][k]+curr.size();
                                dp[i][curr[0]-'a'][k]=min(prev,prev1);
                            }
                        }
                    }
                
            }
        }

        int ans = INT_MAX;
        for (int j = 0; j < 26; j++) {
            for(int k=0;k<26;k++)
            {
                ans=min(ans,dp[n-1][j][k]);
            }
        }

        return ans;
    }
};
