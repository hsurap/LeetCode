class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& a) 
    {
        int n=a.size();
        vector<int>dp(n,1);
        vector<int>hash(n);
        for(int i=0;i<n;i++)
            hash[i]=i;
        sort(a.begin(),a.end());
        int ans=1;
        int ind=0;
        
        for(int i=0;i<n;i++)
        {
            for(int prev=0;prev<i;prev++)
            {
                if((a[i]%a[prev])==0)
                {
                    if(1+dp[prev]>dp[i])
                    {
                        dp[i]=1+dp[prev];
                        hash[i]=prev;
                    }
                }
            }
            if(dp[i]>ans)
            {
                ans=dp[i];
                ind=i;
            }
        }
        // for(int i=0;i<n;i++)
        //     cout<<dp[i]<<" ";
        // cout<<endl;
        // for(int i=0;i<n;i++)
        //     cout<<hash[i]<<" ";
        // cout<<endl;
        vector<int>fans;
        while(ind>=0)
        {
            
            if(ind==hash[ind])break;
            fans.push_back(a[ind]);
            ind=hash[ind];
            if(ind==hash[ind])break;
        }
        fans.push_back(a[ind]);
        return fans;
    }
};