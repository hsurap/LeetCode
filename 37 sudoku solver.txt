class Solution {
public:
    bool check(char no,vector<vector<char>>& board,int row,int col)
    {
        for(int i=0;i<9;i++)
        {
            if(board[row][i]==no)
                return false;
            if(board[i][col]==no)
                return false;
        }
        int r=row/3;
        int c=col/3;
        for(int i=r*3;i<r*3+3;i++)
        {
            for(int j=c*3;j<c*3+3;j++)
            {
                if(board[i][j]==no)
                    return false;
            }
        }
        return true;
    }
    bool func(vector<vector<char>>& board,int row,int col)
    {
        if(row==board.size())return true;
        if(col==board.size()-1)
        {
            if(board[row][col]!='.')
            {
                return func(board,row+1,0);
            }
            else{
                for(int i=1;i<=9;i++)
                {
                    char ch=i+'0';
                    if(check(ch,board,row,col))
                    {
                        board[row][col]=ch;
                        if(func(board,row+1,0))
                            return true;
                    }
                }
                board[row][col]='.';
                return false;
            }
        }
        else{
            if(board[row][col]!='.')
            {
                return func(board,row,col+1);
            }
            else{
                for(int i=1;i<=9;i++)
                {
                    char ch=i+'0';
                    if(check(ch,board,row,col))
                    {
                        board[row][col]=ch;
                        if(func(board,row,col+1))
                            return true;
                    }
                }
                board[row][col]='.';
                return false;
            }
        }
        
    }
    void solveSudoku(vector<vector<char>>& board) 
    {
        bool a=func(board,0,0);
        return;
    }
};