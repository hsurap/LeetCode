class Solution {
public:
    string longestPalindrome(string s) 
    {
        int n=s.size();
        if(n==1)return s;
        vector<vector<int>>dp(n,vector<int>(n,0));
        int ml=1;
        string mxstr="";
        mxstr=s[0];
        for(int i=0;i<n;i++)dp[i][i]=1;
        for(int i=0;i<n-1;i++)dp[i][i+1]=(s[i]==s[i+1]);
        for(int j=2;j<n;j++)
        {
            for(int i=0;i<j-1;i++)
            {
                if(s[i]!=s[j] || dp[i+1][j-1]==0)
                    dp[i][j]=0;
                else
                    dp[i][j]=1;
                
            }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(dp[i][j]==1)
                {
                    int cl=abs(i-j)+1;
                    if(cl>ml)
                    {
                        ml=cl;
                        mxstr=s.substr(min(i,j),cl);
                    }
                }
            }
        }
        // for(int i=0;i<n;i++)
        // {
        //     for(int j=0;j<n;j++)
        //         cout<<dp[i][j]<<" ";
        //     cout<<endl;
        // }
        return mxstr;
    }
};