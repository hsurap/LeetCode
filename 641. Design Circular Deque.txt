class MyCircularDeque {
public:
    int*arr;
    int st,en,size,cap;
    MyCircularDeque(int k)
    {
        arr=new int[k];
        st=en=-1;
        size=0;
        cap=k;
    }
    
    bool insertFront(int value) 
    {
        if(size==cap)return false;
        if(size==0)
        {
            st=0;
            en=0;
            arr[0]=value;
            size++;
            return true;
        }
        if(st==0)
            st=cap-1;
        else
            st=st-1;
        arr[st]=value;
        size++;
        return true;
    }
    
    bool insertLast(int value) 
    {
        if(size==cap)return false;
        if(size==0)
        {
            st=0;
        }
        en=(en+1)%cap;
        arr[en]=value;
        size++;
        return true;
    }
    
    bool deleteFront() 
    {
        if(size==0)return false;
        if(size==1)
        {
            size=0;
            st=en=-1;
            return true;
        }
        if(st==cap-1)st=0;
        else st=st+1;
        size--;
        return true;
    }
    
    bool deleteLast() 
    {
        if(size==0)return false;
        if(size==1)
        {
            size=0;
            st=en=-1;
            return true;
        }
        if(en==0)en=cap-1;
        else en=en-1;
        size--;
        return true;
    }
    
    int getFront() {
        if(size==0)return -1;
        return arr[st];
    }
    
    int getRear() {
        if(size==0)return -1;
        return arr[en];
    }
    
    bool isEmpty() {
        return size==0;
    }
    
    bool isFull() {
        return  size==cap;
    }
};

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque* obj = new MyCircularDeque(k);
 * bool param_1 = obj->insertFront(value);
 * bool param_2 = obj->insertLast(value);
 * bool param_3 = obj->deleteFront();
 * bool param_4 = obj->deleteLast();
 * int param_5 = obj->getFront();
 * int param_6 = obj->getRear();
 * bool param_7 = obj->isEmpty();
 * bool param_8 = obj->isFull();
 */