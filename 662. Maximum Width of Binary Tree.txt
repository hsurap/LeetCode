/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root==NULL)return 0;
        int ans=1;
        queue<pair<TreeNode*,long long int>>q;
        q.push({root,0});
        while(q.size()!=0)
        {
            int n=q.size();
            int firstdif=q.front().second;
            int first=-1,last=-1;
            for(int i=0;i<n;i++)
            {
                auto t=q.front();
                q.pop();
                long long int val=t.second-firstdif;
                if(i==0)
                {
                    first=val;
                }
                if(i==n-1)
                    last=val;
                if(t.first->left!=NULL)
                {
                    q.push({t.first->left,(long long int )(2*val+1)});
                }
                if(t.first->right!=NULL)
                {
                    q.push({t.first->right,(long long int )(2*val+2)});
                }
                if(n>1)
                    ans=max(ans,last-first+1);
            }
        }
        return ans;

    }
};