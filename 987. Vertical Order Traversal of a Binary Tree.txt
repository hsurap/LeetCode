/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map < int, map < int, multiset < int >>> map;
        queue<pair<TreeNode*,pair<int,int>>>q;
        if(root==NULL)return {};
        q.push({root,{0,0}});
        while(q.size()!=0)
        {
            auto f=q.front();
            q.pop();
            TreeNode*n=f.first;
            int x=f.second.first;
            int h=f.second.second;
            map[x][h].insert(n->val);
            if(n->left!=NULL)
            {
                q.push({n->left,{x-1,h+1}});
            }
            if(n->right!=NULL)
            {
                q.push({n->right,{x+1,h+1}});
            }
        }
        vector<vector<int>>ans;
        for(auto i:map)
        { 
            vector<int>sm;
            for(auto j:i.second)
            {
                 
                for(auto k:j.second)
                    sm.push_back(k);
                
            }
            ans.push_back(sm);
        }
        return ans;
    }
};