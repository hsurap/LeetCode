/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void func(TreeNode* root,TreeNode*&node1,TreeNode*&node2,TreeNode*&prev)
    {
        if(root==NULL)return ;
        func(root->left,node1,node2,prev);
        if(prev==NULL)
        {
            prev=root;
        }
        else{
            if(root->val<prev->val  && node2==NULL)
            {
                node1=prev;
                node2=root;
            }
            else if(root->val<prev->val){
                node2=root;
            }
        }
        prev=root;
        func(root->right,node1,node2,prev);
    }
    void recoverTree(TreeNode* root) {
        TreeNode*node1=NULL;
        TreeNode*node2=NULL;
        TreeNode*prev=NULL;
        func(root,node1,node2,prev);
        if(node1==NULL)return ;
        int v=node1->val;
        node1->val=node2->val;
        node2->val=v;
        return;
    }
};