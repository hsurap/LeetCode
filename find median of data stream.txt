class MedianFinder {
public:
    priority_queue<int>maxpq;
    priority_queue<int,vector<int>,greater<int>>minpq;
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if(maxpq.size()==0)
        {
            maxpq.push(num);
        }
        else if(minpq.size()==0)
        {
            if(num>=maxpq.top())
            {
                minpq.push(num);
            }
            else{
                minpq.push(maxpq.top());
                maxpq.pop();
                maxpq.push(num);
            }
        }
        else if(maxpq.size()==minpq.size())
        {
            if(num<=minpq.top())
            {
                maxpq.push(num);
            }
            else{
                maxpq.push(minpq.top());
                minpq.pop();
                minpq.push(num);
            }
        }
        else{
            if(num>=maxpq.top())
            {
                minpq.push(num);
            }else{
                minpq.push(maxpq.top());
                maxpq.pop();
                maxpq.push(num);
            }
        }
    }
    
    double findMedian() {
        if(maxpq.size()==0)return -1;
        if(maxpq.size()!=minpq.size())
            return maxpq.top();
        else
            return (maxpq.top() +minpq.top())/2.0;
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */