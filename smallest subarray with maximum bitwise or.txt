class Solution {
public:
    int number(vector<int>&bits)
    {
        long long int no=1;
        int ans=0;
        for(int i=0;i<bits.size();i++)
        {
            if(bits[i]>0)
            {
                ans=ans+no;
            }
            no=no*2;
        }
        return ans;
    }
    vector<int> smallestSubarrays(vector<int>& v) 
    {
        vector<int>suffix(v.size(),v[v.size()-1]);
        for(int i=v.size()-2;i>=0;i--)
        {
            suffix[i]=(suffix[i+1]|v[i]);
        }
        vector<int>bits(31,0);
        int l=0,r=0;
        vector<int>ans;
        while(l<v.size())
        {
            int cno=number(bits);
            if(cno==suffix[l])
            {
                ans.push_back(max(r-l,1));
                l++;
                int no=v[l-1];
                int indx=0;
                while(no>0)
                {
                    bits[indx]=bits[indx]-(no&1);
                    no=(no>>1);
                    indx++;
                }
            }
            else{
                int no=v[r];
                int indx=0;
                while(no>0)
                {
                    bits[indx]=bits[indx]+(no&1);
                    no=(no>>1);
                    indx++;
                }
                r++;
            }
        }
        return ans;
    }
};